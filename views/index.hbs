<!--
 mbed Cloud Quickstart
 Copyright ARM Limited 2017

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!DOCTYPE html>
<html>
<head>
    <title>mbed Cloud Quickstart</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.min.css">
    <link rel="stylesheet" type="text/css" href="/css/custom.css">
    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" />
</head>
<body class="arm-white">

    <div class="container">

        <div class="row title">
            <div class="ten columns">
                <h3>mbed Cloud Quickstart</h3>
            </div>
            <div class="two columns">
                <select class="u-full-width" id="api-selector" onchange="apiChanged(this)">
                    <option value="connect">Connect</option>
                    <option value="update">Update</option>
                </select>
            </div>
        </div>

        <table class="u-full-width" id="connect">

            {{#each devices}}
            <tr><td>

                <h4 id="header">{{id}}</h4>

                <div class="row" id={{id}}>

                    <div class="six columns">
                        <h5>Presses: <span id="{{id}}-presses">Unknown</span></h5>
                        <label for="{{id}}-subscribePresses">Subscribe
                        <input type="checkbox" id="{{id}}-subscribePresses" onclick="subscribePresses(this)"></label>
                        <button id="{{id}}-getPresses" onclick="getPresses(this)">Get presses (GET)</button>
                    </div>

                    <div class="six columns">
                        <h5>LED blink pattern</h5>
                        <label for="{{id}}-blinkPattern">Pattern
                        <input type="text" placeholder="500:500:500:500" id="{{id}}-blinkPattern" class="u-full-width"></label>
                        <button id="{{id}}-updatePattern" onclick="updateBlinkPattern(this)">Update (PUT)</button>
                        <button id="{{id}}-blink" class="arm-orange" onclick="blink(this)">Blink (POST)</button>
                    </div>

                </div>

            </td></tr>
            {{else}}

            <h2>No devices found</h2>

        {{/each}}
        </table>

        <table class="u-full-width" id="update" hidden>

            <tr>
                <td>
                    <h4>1. Manifest</h4>
                    <button class="arm-orange u-full-width" id="generateManifest"
                            onclick="socket.emit('generate-manifest', {});">Generate</button>
                </td>
                <td>
                    <h4>2. Image</h4>
                    <button class="arm-orange u-full-width" id="uploadImage"
                            onclick="document.getElementById('imageFileSelector').click()">Upload</button>
                </td>
                <td>
                    <h4>3. Campaign</h4>
                    <button class="arm-orange u-full-width" id="startCampaign"
                            onclick="socket.emit('start-campaign', {});">Start</button>
                </td>
            </tr>

            <tr>
                <td colspan="3" id="consoleLog">
                    <h5>Console Log</h5>
                </td>
            </tr>

        </table>

    </div>
    <input accept=".bin" type="file" id="imageFileSelector" style="display: none;" onchange="imageUpload(this)">

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.1/socket.io.js"></script>
<script>
    var socket = io();
    var tabs = ["connect", "update"];

    function apiChanged(element) {
        tabs.forEach(function(tab) {
            document.getElementById(tab).style.display = element.value==tab ? "table" : "none";
        });
    }

    function getPresses(element) {
        socket.emit('get-presses', {
            device: element.parentElement.parentElement.id
        });
    }

    function subscribePresses(element) {
        var verb = element.checked ? 'subscribe-to-presses' : 'unsubscribe-to-presses';
        socket.emit(verb, {
            device: element.parentElement.parentElement.parentElement.id
        });
    }

    function updateBlinkPattern(element) {
        var deviceID = element.parentElement.parentElement.id;
        socket.emit('update-blink-pattern', {
            device: deviceID,
            blinkPattern: document.getElementById(deviceID + "-blinkPattern").value
        });
    }

    function blink(element) {
        socket.emit('blink', {
            device: element.parentElement.parentElement.id
        });
    }

    socket.on('presses', function(data) {
        document.getElementById(data.device + "-presses").innerHTML = data.value;
    });

    socket.on('generated-manifest', function(data) {
      var file_path = '/update_default_resources.c';
      var a = document.createElement('A');
      a.href = file_path;
      a.download = file_path.substr(file_path.lastIndexOf('/') + 1);
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    });


    function imageUpload(element) {
        var file = element.files[0];

        var request = new XMLHttpRequest();
        request.open('POST', '/uploadImage', true);

        form_data = new FormData();
        form_data.append('image', file);
        request.send(form_data);
    }

    function manifestUpload() {
        var file = document.getElementById('manifest_file_selector').files[0];
        delivery.send(file, {
            name: 'manifest'
        });
    }
    socket.on('console-log', function(data) {
        var oldText = document.getElementById("consoleLog").innerHTML;
        document.getElementById("consoleLog").innerHTML = oldText + data;
    });

</script>
</body>
</html>
