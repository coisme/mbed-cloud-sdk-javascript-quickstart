<!--
 Mbed Cloud Quickstart
 Copyright ARM Limited 2017

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<!DOCTYPE html>
<html>
<head>
    <title>Mbed Cloud Quickstart</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.min.css">
    <link rel="stylesheet" type="text/css" href="/css/custom.css">
    <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" />
</head>
<body class="arm-white">

    <div class="container">

        <div class="row title">
            <div class="ten columns">
                <h3>Mbed Cloud Quickstart</h3>
            </div>
        </div>

        <table class="u-full-width" id="connect">

            {{#each devices}}
            <tr><td>

                <h4 id="header">{{id}}</h4>

                <div class="row" id={{id}}>

                    <div class="three columns">
                        <span> OFF / ON</span><br>
                        <label class="switch">
                          <input type="checkbox" id="{{id}}-switch" onclick="switchTrigger(this)">
                          <span class="slider round"></span>
                        </label>
                    </div>

                    <div class="nine columns">
                        <h5>Power (w/h)</h5>
                        <div id="chart-{{id}}" style="height: 10em; width:100%;"><svg></svg></div>
                        <script type="text/javascript">
                            graph_data['{{id}}'] = []; // add array for device to global graph data object

                            nv.addGraph(function() {
                                charts['{{id}}'] = nv.models.lineChart().useInteractiveGuideline(false);
                                charts['{{id}}'].xAxis
                                    .axisLabel('Time')
                                    .tickFormat(function(d) { return d3.time.format('%H:%M:%S')(new Date(d)); });
                                charts['{{id}}'].yAxis
                                    .axisLabel('Value')
                                    .tickFormat(d3.format('.1f'));

                                charts['{{id}}'].yDomain([0,4]);
                                updateChartDatum('{{id}}',() => { return []})
                                nv.utils.windowResize(charts['{{id}}'].update);
                                return charts['{{id}}'];
                            });

                         </script>
                    </div>

                </div>

            </td></tr>
            {{else}}

            <h2>No devices found</h2>

        {{/each}}
        </table>

    </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.1/socket.io.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.8.6/nv.d3.min.js"></script>
<script>
    var socket = io();

    // update webapp switch with data from board (embedded device -> webapp)
    socket.on('switchFlip', function(data) {
        console.log("Switch flipped for "+data.device+" with value "+data.value)
        // Set checkbox in webapp to match value on device. 0 (off) = false, 1 (on) = true
        if(data.value == 0){
            document.getElementById(data.device + "-switch").checked = false;
        }
        else if (data.value == 1){
            document.getElementById(data.device + "-switch").checked = true;
        }
    });

    // update chart with new values as they come in
    socket.on('updateChart', function(data){
        // Add data to graph for device
        console.log("socket.on.updateChart");
        console.log("Device: "+data.device+", value : "+data.value);
        var date = new Date();
        graph_data[data.device].push({x: date.getTime(), y: data.value}); // add data to dictionary
        if(graph_data[data.device].length > 10) {
            graph_data[data.device].shift() // shift data to left, only keep 10 points
        }
        updateChartDatum(data.device,function() {
            return [
            {
                // format dictionary to match nvd3 requirements
                values: graph_data[data.device],
                key: 'data',
                color: '#ff7f0e'
            }]
        })
    });

    var graph_data = []; // create global array for graph data. Each entry will be key'd by device ID
    var charts = []; // global chart object
    var updateChartDatum = function(id,data) {
        // console.log(data)
        d3.select('#chart-'+id+' svg')
            .datum(data)
            .transition().duration(500)
            .call(charts[id]);
    }
</script>
</body>
</html>
